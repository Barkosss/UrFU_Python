import datetime
import sys

from PyQt6.QtCore import Qt, QDateTime, QTimer, QUrl, QSize
from PyQt6.QtMultimedia import QMediaPlayer, QAudioOutput
from PyQt6.QtWidgets import (QApplication, QPushButton, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QMainWindow, QDateTimeEdit, QFileDialog)

class MainWindow(QMainWindow):

    def __init__(self):
        super(MainWindow, self).__init__()

        # –û–∫–Ω–æ
        self.setWindowTitle("Stopwatch")
        self.setMinimumHeight(400)
        self.setMaximumHeight(500)
        self.setMinimumWidth(400)
        self.setMaximumWidth(400)

        # –ü–æ–ª—è
        self.time_clock = 60
        self.is_running = False
        self.is_pause = False
        self.error_label = None

        # –¢–∞–π–º–µ—Ä
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_timer)

        # –ê—É–¥–∏–æ
        self.media_player = QMediaPlayer()
        self.audio_output = QAudioOutput()
        self.media_player.setAudioOutput(self.audio_output)
        self.button_notify = QPushButton("üîî")
        self.button_notify.setFixedSize(50, 50)
        self.button_notify.clicked.connect(self.button_notify_load)

        # –í–∏–¥–∂–µ—Ç—ã
        layout = QVBoxLayout()
        action_layout = QHBoxLayout()
        time_layout = QHBoxLayout()
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –í—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
        self.time_label = QLabel("0 Seconds", self)
        self.date_time = QDateTimeEdit(datetime.datetime.now())
        self.time_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.time_label.setStyleSheet("font-size: 32px;")
        layout.addWidget(self.time_label)
        layout.addWidget(self.date_time)

        # –ö–Ω–æ–ø–∫–∏
        self.button_start = QPushButton("Start")  # –ù–∞—á–∞—Ç—å —Ç–∞–π–º–µ—Ä
        self.button_start.setStyleSheet(
            "QPushButton { font-size: 24px; font-weight: 700; height: 50px; width: 150px;"
            "background-color: #70C17F; color: white; }"
            "QPushButton:hover { background-color: #B3D8BA; }"
            "QPushButton:pressed { background-color: #DF5349; }"
        )
        self.button_start.clicked.connect(self.button_start_timer)
        self.button_start.setFixedSize(100, 50)

        self.button_pause = QPushButton("Pause")  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
        self.button_pause.setStyleSheet(
            "QPushButton { font-size: 24px; font-weight: 700; height: 50px; width: 150px;"
            "background-color: #F0B67F; color: white; }"
            "QPushButton:hover { background-color: #D6A271; }"
            "QPushButton:pressed { background-color: #DF5349; }"
        )
        self.button_pause.clicked.connect(self.button_pause_timer)
        self.button_pause.setFixedSize(100, 50)

        self.button_reset = QPushButton("Reset")  # –û–±–Ω—É–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä
        self.button_reset.setStyleSheet(
            "QPushButton {"
            "font-size: 24px; font-weight: 700;height: 50px; width: 150px;"
            "background-color: #FE5F55; color: white; }"
            "QPushButton:hover { background-color: #DF5349; }"
            "QPushButton:pressed { background-color: #DF5349; }"
        )
        self.button_reset.clicked.connect(self.button_reset_timer)
        self.button_reset.setFixedSize(100, 50)

        # –ü—Ä–µ–¥–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.button_start_one_minutes = QPushButton("1 Minutes")
        self.button_start_one_minutes.clicked.connect(lambda: self.button_start_timer(1))
        self.button_start_one_minutes.setFixedSize(100, 50)

        self.button_start_five_minutes = QPushButton("5 Minutes")
        self.button_start_five_minutes.clicked.connect(lambda: self.button_start_timer(5))
        self.button_start_five_minutes.setFixedSize(100, 50)

        self.button_start_fifteen_minutes = QPushButton("15 Minutes")
        self.button_start_fifteen_minutes.clicked.connect(lambda: self.button_start_timer(15))
        self.button_start_fifteen_minutes.setFixedSize(100, 50)

        action_layout.addWidget(self.button_notify)
        action_layout.addWidget(self.button_start)
        action_layout.addWidget(self.button_pause)
        action_layout.addWidget(self.button_reset)

        time_layout.addWidget(self.button_start_one_minutes)
        time_layout.addWidget(self.button_start_five_minutes)
        time_layout.addWidget(self.button_start_fifteen_minutes)

        layout.addLayout(action_layout)
        layout.addLayout(time_layout)
        central_widget.setLayout(layout)

    def update_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            formatter_time = self.format_time(self.time_clock)
            # TODO: –ò–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
            if self.time_clock > 0:
                self.time_clock -= 1
                self.time_label.setText(formatter_time)
            else:
                self.timer.stop()
                self.is_running = False
                self.time_label.setText("–í—Ä–µ–º—è –≤—ã—à–ª–æ!")
                self.media_player.play()

        except Exception as err:
            print(f"ERROR | Update timer: {err}")

    @staticmethod
    def format_time(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            units = [
                ("years", 31556952),
                ("months", 2629746),
                ("weeks", 604800),
                ("days", 86400),
                ("hours", 3600),
                ("minutes", 60),
                ("seconds", 1),
            ]

            result = []
            for name, unit_seconds in units:
                time = seconds // unit_seconds
                if time:
                    result.append(f"{time} {name}")
                seconds %= unit_seconds

            return "\n".join(result)
        except Exception as err:
            print(f"ERROR | Format time: {err}")

    def button_start_timer(self, start_time: int = 0):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        try:
            self.media_player.stop()
            target_time = QDateTime().currentDateTime()

            if start_time and not self.is_pause:
                target_time = QDateTime.currentDateTime().addSecs(start_time * 60)
            elif not start_time and not self.is_pause:
                target_time = self.date_time.dateTime()

            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
            if self.is_pause:
                self.is_pause = False
                self.timer.start(1000)

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
            elif not self.is_running:
                current_time = QDateTime.currentDateTime()
                try:
                    if target_time > current_time:
                        # –í—Ä–µ–º—è –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                        self.time_clock = current_time.secsTo(target_time)
                        self.is_running = True
                        # –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                        self.timer.start(1000)
                    else:
                        self.time_label.setText("–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è")
                except Exception:
                    self.time_label.setText("–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è")

        except Exception as err:
            print(f"ERROR | Start timer: {err}")

    def button_pause_timer(self):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑—É"""
        try:
            self.media_player.stop()
            self.timer.stop()
            self.is_pause = True
            self.is_running = False

        except Exception as err:
            print(f"ERROR | Pause timer: {err}")

    def button_reset_timer(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        try:
            self.media_player.stop()
            self.timer.stop()
            self.is_running = False
            self.time_clock = 0
            self.time_label.setText("0 Seconds")
        except Exception as err:
            print(f"ERROR | Reset timer: {err}")

    def button_notify_load(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            # TODO: –ú–µ–Ω—è—Ç—å –∏–∫–æ–Ω–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
            file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", "",
                                                       "Audio Files (*.mp3 *.wav *.ogg)")
            if file_path:
                file_url = QUrl.fromLocalFile(file_path)
                self.media_player.setSource(file_url)

        except Exception as err:
            print(f"ERROR | Notify load: {err}")


if __name__ == "__main__":
    app = QApplication(sys.argv)

    window = MainWindow()
    window.show()

    app.exec()
